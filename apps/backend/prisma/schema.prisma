/**
 * Reiseklar Prisma Schema
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * USER & AUTH MODELS
 */
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  passwordHash    String
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  trips  Trip[]
  alerts Alert[]
  tokens RefreshToken[]
  verifs EmailVerification[]
  places Place[]
}

/**
 * Email verification codes (4-digit PIN)
 */
model EmailVerification {
  id         String    @id @default(cuid())
  userId     String
  codeHash   String
  expiresAt  DateTime
  attempts   Int       @default(0)
  sentCount  Int       @default(1)
  lastSentAt DateTime  @default(now())
  consumedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
}

/**
 * JWT Refresh Tokens (rotating)
 */
model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String // hashed refresh token
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, revokedAt])
}

/**
 * TRIP & ALERT MODELS
 */
model Place {
  id        String   @id @default(cuid())
  userId    String
  label     String
  lat       Float
  lon       Float
  address   String
  createdAt DateTime @default(now())

  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  origins      Trip[] @relation("TripOrigin")
  destinations Trip[] @relation("TripDestination")
}

model Trip {
  id            String   @id @default(cuid())
  userId        String
  originId      String
  destinationId String
  accessibility String   @default("none")
  createdAt     DateTime @default(now())

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  origin      Place   @relation("TripOrigin", fields: [originId], references: [id])
  destination Place   @relation("TripDestination", fields: [destinationId], references: [id])
  alerts      Alert[]
}

/**
 * ALERT MODEL
 */
model Alert {
  id           String   @id @default(cuid())
  userId       String
  tripId       String
  thresholdMin Int      @default(5)
  channel      String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
}
